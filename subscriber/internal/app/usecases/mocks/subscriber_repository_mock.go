// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/igortoigildin/go-contacts/subscriber/internal/app/models"
	mock "github.com/stretchr/testify/mock"

	subscriber "github.com/igortoigildin/go-contacts/subscriber/internal/app/usecases/models"
)

// SubscriberRepository is an autogenerated mock type for the SubscriberRepository type
type SubscriberRepository struct {
	mock.Mock
}

// AcceptRequest provides a mock function with given fields: ctx, filter
func (_m *SubscriberRepository) AcceptRequest(ctx context.Context, filter *subscriber.FriendRequestUpdateFilter) error {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for AcceptRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subscriber.FriendRequestUpdateFilter) error); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MakeFriendRequest provides a mock function with given fields: ctx, reqfriendRequest
func (_m *SubscriberRepository) MakeFriendRequest(ctx context.Context, reqfriendRequest *models.FriendRequest) error {
	ret := _m.Called(ctx, reqfriendRequest)

	if len(ret) == 0 {
		panic("no return value specified for MakeFriendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.FriendRequest) error); ok {
		r0 = rf(ctx, reqfriendRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RejectRequest provides a mock function with given fields: ctx, filter
func (_m *SubscriberRepository) RejectRequest(ctx context.Context, filter *subscriber.FriendRequestUpdateFilter) error {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for RejectRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subscriber.FriendRequestUpdateFilter) error); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveFriendRequest provides a mock function with given fields: ctx, filters
func (_m *SubscriberRepository) RemoveFriendRequest(ctx context.Context, filters *subscriber.FriendRequestDeleteFilter) error {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFriendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subscriber.FriendRequestDeleteFilter) error); ok {
		r0 = rf(ctx, filters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubscriberRepository creates a new instance of SubscriberRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriberRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriberRepository {
	mock := &SubscriberRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
