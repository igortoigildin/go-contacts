// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: proto/service.proto

/*
Package proto is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package proto

import (
	"context"
	"errors"
	"io"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// Suppress "imported and not used" errors
var (
	_ codes.Code
	_ io.Reader
	_ status.Status
	_ = errors.New
	_ = runtime.String
	_ = utilities.NewDoubleArray
	_ = metadata.Join
)

func request_FriendRequestService_MakeFriendRequest_0(ctx context.Context, marshaler runtime.Marshaler, client FriendRequestServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq FriendRequest
		metadata runtime.ServerMetadata
	)
	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && !errors.Is(err, io.EOF) {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.MakeFriendRequest(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func local_request_FriendRequestService_MakeFriendRequest_0(ctx context.Context, marshaler runtime.Marshaler, server FriendRequestServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq FriendRequest
		metadata runtime.ServerMetadata
	)
	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && !errors.Is(err, io.EOF) {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := server.MakeFriendRequest(ctx, &protoReq)
	return msg, metadata, err
}

func request_FriendAcceptService_AcceptFriend_0(ctx context.Context, marshaler runtime.Marshaler, client FriendAcceptServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq FriendAcceptRequest
		metadata runtime.ServerMetadata
	)
	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && !errors.Is(err, io.EOF) {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.AcceptFriend(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func local_request_FriendAcceptService_AcceptFriend_0(ctx context.Context, marshaler runtime.Marshaler, server FriendAcceptServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq FriendAcceptRequest
		metadata runtime.ServerMetadata
	)
	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && !errors.Is(err, io.EOF) {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := server.AcceptFriend(ctx, &protoReq)
	return msg, metadata, err
}

func request_FriendRejectService_RejectFriend_0(ctx context.Context, marshaler runtime.Marshaler, client FriendRejectServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq RejectFriendRequest
		metadata runtime.ServerMetadata
	)
	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && !errors.Is(err, io.EOF) {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.RejectFriend(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func local_request_FriendRejectService_RejectFriend_0(ctx context.Context, marshaler runtime.Marshaler, server FriendRejectServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq RejectFriendRequest
		metadata runtime.ServerMetadata
	)
	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && !errors.Is(err, io.EOF) {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := server.RejectFriend(ctx, &protoReq)
	return msg, metadata, err
}

func request_FriendRemoveService_RemoveFriend_0(ctx context.Context, marshaler runtime.Marshaler, client FriendRemoveServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq RemoveFriendRequest
		metadata runtime.ServerMetadata
	)
	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && !errors.Is(err, io.EOF) {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.RemoveFriend(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func local_request_FriendRemoveService_RemoveFriend_0(ctx context.Context, marshaler runtime.Marshaler, server FriendRemoveServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq RemoveFriendRequest
		metadata runtime.ServerMetadata
	)
	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && !errors.Is(err, io.EOF) {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := server.RemoveFriend(ctx, &protoReq)
	return msg, metadata, err
}

func request_FriendListService_ListFriends_0(ctx context.Context, marshaler runtime.Marshaler, client FriendListServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq ListFriendsRequest
		metadata runtime.ServerMetadata
	)
	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && !errors.Is(err, io.EOF) {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.ListFriends(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func local_request_FriendListService_ListFriends_0(ctx context.Context, marshaler runtime.Marshaler, server FriendListServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq ListFriendsRequest
		metadata runtime.ServerMetadata
	)
	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && !errors.Is(err, io.EOF) {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := server.ListFriends(ctx, &protoReq)
	return msg, metadata, err
}

// RegisterFriendRequestServiceHandlerServer registers the http handlers for service FriendRequestService to "mux".
// UnaryRPC     :call FriendRequestServiceServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterFriendRequestServiceHandlerFromEndpoint instead.
// GRPC interceptors will not work for this type of registration. To use interceptors, you must use the "runtime.WithMiddlewares" option in the "runtime.NewServeMux" call.
func RegisterFriendRequestServiceHandlerServer(ctx context.Context, mux *runtime.ServeMux, server FriendRequestServiceServer) error {
	mux.Handle(http.MethodPost, pattern_FriendRequestService_MakeFriendRequest_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateIncomingContext(ctx, mux, req, "/github.com.igortoigildin.go.contacts.subscriber.FriendRequestService/MakeFriendRequest", runtime.WithHTTPPathPattern("/github.com.igortoigildin.go.contacts.subscriber.FriendRequestService/MakeFriendRequest"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_FriendRequestService_MakeFriendRequest_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_FriendRequestService_MakeFriendRequest_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})

	return nil
}

// RegisterFriendAcceptServiceHandlerServer registers the http handlers for service FriendAcceptService to "mux".
// UnaryRPC     :call FriendAcceptServiceServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterFriendAcceptServiceHandlerFromEndpoint instead.
// GRPC interceptors will not work for this type of registration. To use interceptors, you must use the "runtime.WithMiddlewares" option in the "runtime.NewServeMux" call.
func RegisterFriendAcceptServiceHandlerServer(ctx context.Context, mux *runtime.ServeMux, server FriendAcceptServiceServer) error {
	mux.Handle(http.MethodPost, pattern_FriendAcceptService_AcceptFriend_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateIncomingContext(ctx, mux, req, "/github.com.igortoigildin.go.contacts.subscriber.FriendAcceptService/AcceptFriend", runtime.WithHTTPPathPattern("/github.com.igortoigildin.go.contacts.subscriber.FriendAcceptService/AcceptFriend"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_FriendAcceptService_AcceptFriend_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_FriendAcceptService_AcceptFriend_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})

	return nil
}

// RegisterFriendRejectServiceHandlerServer registers the http handlers for service FriendRejectService to "mux".
// UnaryRPC     :call FriendRejectServiceServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterFriendRejectServiceHandlerFromEndpoint instead.
// GRPC interceptors will not work for this type of registration. To use interceptors, you must use the "runtime.WithMiddlewares" option in the "runtime.NewServeMux" call.
func RegisterFriendRejectServiceHandlerServer(ctx context.Context, mux *runtime.ServeMux, server FriendRejectServiceServer) error {
	mux.Handle(http.MethodPost, pattern_FriendRejectService_RejectFriend_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateIncomingContext(ctx, mux, req, "/github.com.igortoigildin.go.contacts.subscriber.FriendRejectService/RejectFriend", runtime.WithHTTPPathPattern("/github.com.igortoigildin.go.contacts.subscriber.FriendRejectService/RejectFriend"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_FriendRejectService_RejectFriend_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_FriendRejectService_RejectFriend_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})

	return nil
}

// RegisterFriendRemoveServiceHandlerServer registers the http handlers for service FriendRemoveService to "mux".
// UnaryRPC     :call FriendRemoveServiceServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterFriendRemoveServiceHandlerFromEndpoint instead.
// GRPC interceptors will not work for this type of registration. To use interceptors, you must use the "runtime.WithMiddlewares" option in the "runtime.NewServeMux" call.
func RegisterFriendRemoveServiceHandlerServer(ctx context.Context, mux *runtime.ServeMux, server FriendRemoveServiceServer) error {
	mux.Handle(http.MethodPost, pattern_FriendRemoveService_RemoveFriend_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateIncomingContext(ctx, mux, req, "/github.com.igortoigildin.go.contacts.subscriber.FriendRemoveService/RemoveFriend", runtime.WithHTTPPathPattern("/github.com.igortoigildin.go.contacts.subscriber.FriendRemoveService/RemoveFriend"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_FriendRemoveService_RemoveFriend_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_FriendRemoveService_RemoveFriend_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})

	return nil
}

// RegisterFriendListServiceHandlerServer registers the http handlers for service FriendListService to "mux".
// UnaryRPC     :call FriendListServiceServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterFriendListServiceHandlerFromEndpoint instead.
// GRPC interceptors will not work for this type of registration. To use interceptors, you must use the "runtime.WithMiddlewares" option in the "runtime.NewServeMux" call.
func RegisterFriendListServiceHandlerServer(ctx context.Context, mux *runtime.ServeMux, server FriendListServiceServer) error {
	mux.Handle(http.MethodPost, pattern_FriendListService_ListFriends_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateIncomingContext(ctx, mux, req, "/github.com.igortoigildin.go.contacts.subscriber.FriendListService/ListFriends", runtime.WithHTTPPathPattern("/github.com.igortoigildin.go.contacts.subscriber.FriendListService/ListFriends"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_FriendListService_ListFriends_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_FriendListService_ListFriends_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})

	return nil
}

// RegisterFriendRequestServiceHandlerFromEndpoint is same as RegisterFriendRequestServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterFriendRequestServiceHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.NewClient(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()
	return RegisterFriendRequestServiceHandler(ctx, mux, conn)
}

// RegisterFriendRequestServiceHandler registers the http handlers for service FriendRequestService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterFriendRequestServiceHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterFriendRequestServiceHandlerClient(ctx, mux, NewFriendRequestServiceClient(conn))
}

// RegisterFriendRequestServiceHandlerClient registers the http handlers for service FriendRequestService
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "FriendRequestServiceClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "FriendRequestServiceClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "FriendRequestServiceClient" to call the correct interceptors. This client ignores the HTTP middlewares.
func RegisterFriendRequestServiceHandlerClient(ctx context.Context, mux *runtime.ServeMux, client FriendRequestServiceClient) error {
	mux.Handle(http.MethodPost, pattern_FriendRequestService_MakeFriendRequest_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/github.com.igortoigildin.go.contacts.subscriber.FriendRequestService/MakeFriendRequest", runtime.WithHTTPPathPattern("/github.com.igortoigildin.go.contacts.subscriber.FriendRequestService/MakeFriendRequest"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_FriendRequestService_MakeFriendRequest_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_FriendRequestService_MakeFriendRequest_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})
	return nil
}

var (
	pattern_FriendRequestService_MakeFriendRequest_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"github.com.igortoigildin.go.contacts.subscriber.FriendRequestService", "MakeFriendRequest"}, ""))
)

var (
	forward_FriendRequestService_MakeFriendRequest_0 = runtime.ForwardResponseMessage
)

// RegisterFriendAcceptServiceHandlerFromEndpoint is same as RegisterFriendAcceptServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterFriendAcceptServiceHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.NewClient(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()
	return RegisterFriendAcceptServiceHandler(ctx, mux, conn)
}

// RegisterFriendAcceptServiceHandler registers the http handlers for service FriendAcceptService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterFriendAcceptServiceHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterFriendAcceptServiceHandlerClient(ctx, mux, NewFriendAcceptServiceClient(conn))
}

// RegisterFriendAcceptServiceHandlerClient registers the http handlers for service FriendAcceptService
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "FriendAcceptServiceClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "FriendAcceptServiceClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "FriendAcceptServiceClient" to call the correct interceptors. This client ignores the HTTP middlewares.
func RegisterFriendAcceptServiceHandlerClient(ctx context.Context, mux *runtime.ServeMux, client FriendAcceptServiceClient) error {
	mux.Handle(http.MethodPost, pattern_FriendAcceptService_AcceptFriend_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/github.com.igortoigildin.go.contacts.subscriber.FriendAcceptService/AcceptFriend", runtime.WithHTTPPathPattern("/github.com.igortoigildin.go.contacts.subscriber.FriendAcceptService/AcceptFriend"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_FriendAcceptService_AcceptFriend_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_FriendAcceptService_AcceptFriend_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})
	return nil
}

var (
	pattern_FriendAcceptService_AcceptFriend_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"github.com.igortoigildin.go.contacts.subscriber.FriendAcceptService", "AcceptFriend"}, ""))
)

var (
	forward_FriendAcceptService_AcceptFriend_0 = runtime.ForwardResponseMessage
)

// RegisterFriendRejectServiceHandlerFromEndpoint is same as RegisterFriendRejectServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterFriendRejectServiceHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.NewClient(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()
	return RegisterFriendRejectServiceHandler(ctx, mux, conn)
}

// RegisterFriendRejectServiceHandler registers the http handlers for service FriendRejectService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterFriendRejectServiceHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterFriendRejectServiceHandlerClient(ctx, mux, NewFriendRejectServiceClient(conn))
}

// RegisterFriendRejectServiceHandlerClient registers the http handlers for service FriendRejectService
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "FriendRejectServiceClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "FriendRejectServiceClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "FriendRejectServiceClient" to call the correct interceptors. This client ignores the HTTP middlewares.
func RegisterFriendRejectServiceHandlerClient(ctx context.Context, mux *runtime.ServeMux, client FriendRejectServiceClient) error {
	mux.Handle(http.MethodPost, pattern_FriendRejectService_RejectFriend_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/github.com.igortoigildin.go.contacts.subscriber.FriendRejectService/RejectFriend", runtime.WithHTTPPathPattern("/github.com.igortoigildin.go.contacts.subscriber.FriendRejectService/RejectFriend"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_FriendRejectService_RejectFriend_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_FriendRejectService_RejectFriend_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})
	return nil
}

var (
	pattern_FriendRejectService_RejectFriend_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"github.com.igortoigildin.go.contacts.subscriber.FriendRejectService", "RejectFriend"}, ""))
)

var (
	forward_FriendRejectService_RejectFriend_0 = runtime.ForwardResponseMessage
)

// RegisterFriendRemoveServiceHandlerFromEndpoint is same as RegisterFriendRemoveServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterFriendRemoveServiceHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.NewClient(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()
	return RegisterFriendRemoveServiceHandler(ctx, mux, conn)
}

// RegisterFriendRemoveServiceHandler registers the http handlers for service FriendRemoveService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterFriendRemoveServiceHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterFriendRemoveServiceHandlerClient(ctx, mux, NewFriendRemoveServiceClient(conn))
}

// RegisterFriendRemoveServiceHandlerClient registers the http handlers for service FriendRemoveService
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "FriendRemoveServiceClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "FriendRemoveServiceClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "FriendRemoveServiceClient" to call the correct interceptors. This client ignores the HTTP middlewares.
func RegisterFriendRemoveServiceHandlerClient(ctx context.Context, mux *runtime.ServeMux, client FriendRemoveServiceClient) error {
	mux.Handle(http.MethodPost, pattern_FriendRemoveService_RemoveFriend_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/github.com.igortoigildin.go.contacts.subscriber.FriendRemoveService/RemoveFriend", runtime.WithHTTPPathPattern("/github.com.igortoigildin.go.contacts.subscriber.FriendRemoveService/RemoveFriend"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_FriendRemoveService_RemoveFriend_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_FriendRemoveService_RemoveFriend_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})
	return nil
}

var (
	pattern_FriendRemoveService_RemoveFriend_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"github.com.igortoigildin.go.contacts.subscriber.FriendRemoveService", "RemoveFriend"}, ""))
)

var (
	forward_FriendRemoveService_RemoveFriend_0 = runtime.ForwardResponseMessage
)

// RegisterFriendListServiceHandlerFromEndpoint is same as RegisterFriendListServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterFriendListServiceHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.NewClient(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()
	return RegisterFriendListServiceHandler(ctx, mux, conn)
}

// RegisterFriendListServiceHandler registers the http handlers for service FriendListService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterFriendListServiceHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterFriendListServiceHandlerClient(ctx, mux, NewFriendListServiceClient(conn))
}

// RegisterFriendListServiceHandlerClient registers the http handlers for service FriendListService
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "FriendListServiceClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "FriendListServiceClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "FriendListServiceClient" to call the correct interceptors. This client ignores the HTTP middlewares.
func RegisterFriendListServiceHandlerClient(ctx context.Context, mux *runtime.ServeMux, client FriendListServiceClient) error {
	mux.Handle(http.MethodPost, pattern_FriendListService_ListFriends_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/github.com.igortoigildin.go.contacts.subscriber.FriendListService/ListFriends", runtime.WithHTTPPathPattern("/github.com.igortoigildin.go.contacts.subscriber.FriendListService/ListFriends"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_FriendListService_ListFriends_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_FriendListService_ListFriends_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})
	return nil
}

var (
	pattern_FriendListService_ListFriends_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"github.com.igortoigildin.go.contacts.subscriber.FriendListService", "ListFriends"}, ""))
)

var (
	forward_FriendListService_ListFriends_0 = runtime.ForwardResponseMessage
)
